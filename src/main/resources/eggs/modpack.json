{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2025-06-29T21:26:17+00:00",
    "name": "Universal_CurseForge_Modpack_Installer_v1.5.1",
    "author": "unknown@unknown.com",
    "description": "Universal egg to install Forge, NeoForge, Fabric, or Quilt modpacks from CurseForge. Reads manifest.json, downloads mods, and attempts to clean client-side mods. (Enhanced Debugging v1.5.1 - JSON Fix)",
    "features": [
        "eula",
        "java_version",
        "gsltoken"
    ],
    "docker_images": {
        "ghcr.io\/pterodactyl\/yolks:java_17": "ghcr.io\/pterodactyl\/yolks:java_17"
    },
    "file_denylist": [],
    "startup": ".\/start-server.sh",
    "config": {
        "files": "{\r\n    \"server.properties\": {\r\n        \"parser\": \"properties\",\r\n        \"find\": {\r\n            \"server-ip\": \"0.0.0.0\",\r\n            \"server-port\": \"{{server.build.default.port}}\",\r\n            \"query.port\": \"{{server.build.default.port}}\"\r\n        }\r\n    },\r\n    \"eula.txt\": {\r\n        \"parser\": \"file\",\r\n        \"find\": {\r\n            \"eula=false\": \"eula=true\"\r\n        }\r\n    }\r\n}",
        "startup": "{\r\n    \"done\": \")! For help, type \",\r\n    \"userInteraction\": [\r\n        \"Go to eula.txt for more info.\"\r\n    ],\r\n    \"custom\": false\r\n}",
        "logs": "{\r\n    \"custom\": true,\r\n    \"custom_log_path\": \"logs\/latest.log\"\r\n}",
        "stop": "stop"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/ash\r\n# Universal CurseForge Modpack Installer Egg Script v1.7.3 (Generates Smart Startup Script)\r\n\r\n# --- UTILITY FUNCTIONS ---\r\nlog_info() { echo \"[INFO] :: $1\" >&2; }\r\nlog_warn() { echo \"[WARN] :: $1\" >&2; }\r\nlog_fatal() { echo \"[FATAL] :: $1\" >&2; exit 1; }\r\n\r\n# --- SCRIPT START ---\r\necho \"--- UNIVERSAL EGG INSTALL SCRIPT v1.7.3 (Generates Smart Startup Script) STARTED ---\"\r\necho \"Timestamp: $(date)\"\r\necho \"Working directory: $(pwd) | User: $(whoami)\"\r\necho \"------------------------------------------------------------------\"\r\n\r\necho \"--- Received Environment Variables ---\"\r\necho \"MODPACK_PROJECT_ID: [${MODPACK_PROJECT_ID}]\"\r\necho \"CURSEFORGE_API_KEY (first 5 chars): [$(echo \"${CURSEFORGE_API_KEY}\" | cut -c 1-5)...]\"\r\necho \"MODPACK_FILE_ID (specific version): [${MODPACK_FILE_ID}]\"\r\necho \"MINECRAFT_VERSION_HINT: [${MINECRAFT_VERSION_HINT}]\"\r\necho \"LOADER_VERSION_HINT: [${LOADER_VERSION_HINT}]\"\r\necho \"SERVER_JARFILE (egg var): [${SERVER_JARFILE}]\"\r\necho \"--------------------------------------\"\r\n\r\n# Exit on any command failure\r\nset -e\r\n\r\n# --- SETUP AND DEPENDENCIES ---\r\nlog_info \"Updating package lists and installing dependencies...\"\r\napk update\r\napk add --no-cache curl wget jq unzip openjdk17-jre\r\nlog_info \"Dependencies installed.\"\r\n\r\n# --- VARIABLE SETUP & VALIDATION ---\r\nPROJECT_ID=\"${MODPACK_PROJECT_ID}\"\r\nAPI_KEY=\"${CURSEFORGE_API_KEY}\"\r\nSERVER_DIR=\"\/mnt\/server\"\r\nCURSEFORGE_API_URL_BASE=\"https:\/\/api.curseforge.com\/v1\/mods\"\r\nINSTALL_TYPE=\"UNKNOWN\" # Will be determined later\r\n\r\nif [ -z \"${PROJECT_ID}\" ]; then log_fatal \"MODPACK_PROJECT_ID environment variable is not set.\"; fi\r\nif [ -z \"${API_KEY}\" ]; then log_fatal \"CURSEFORGE_API_KEY environment variable is not set.\"; fi\r\n\r\n# --- SERVER DIRECTORY CLEANUP ---\r\ncd \"${SERVER_DIR}\" \r\nif [ -n \"$(find . -mindepth 1 -maxdepth 1)\" ]; then\r\n    log_warn \"Cleaning pre-existing files in ${SERVER_DIR}...\"\r\n    find . -mindepth 1 -maxdepth 1 -exec rm -rf {} +\r\n    log_info \"Server directory cleaned.\"\r\nfi\r\n\r\n# --- CORE FUNCTIONS ---\r\nget_download_url() {\r\n    local p_id=\"$1\"\r\n    local f_id=\"$2\"\r\n    local dl_json\r\n    local file_info_url=\"${CURSEFORGE_API_URL_BASE}\/${p_id}\/files\/${f_id}\/download-url\"\r\n    \r\n    dl_json=$(curl --fail -L -sS -H \"Accept: application\/json\" -H \"x-api-key: ${API_KEY}\" \"${file_info_url}\" 2>\/dev\/null)\r\n    if [ $? -ne 0 ]; then\r\n        log_warn \"Could not get a download URL for P:${p_id} F:${f_id} (HTTP error).\"\r\n        return 1\r\n    fi\r\n    \r\n    local pack_dl_url\r\n    pack_dl_url=$(echo \"${dl_json}\" | jq -r '.data \/\/ empty')\r\n    if [ -z \"${pack_dl_url}\" ] || [ \"${pack_dl_url}\" = \"null\" ]; then\r\n        log_warn \"Could not get a download URL for P:${p_id} F:${f_id} (API response was invalid).\"\r\n        return 1\r\n    fi\r\n    printf \"%s\" \"${pack_dl_url}\"\r\n    return 0\r\n}\r\n\r\njson_download_mods() {\r\n    log_info \"Starting mod download process from manifest.json...\"\r\n    local manifest_file=\".\/manifest.json\"\r\n    local failed_log_file=\"${SERVER_DIR}\/failed_downloads.log\"\r\n    rm -f \"${failed_log_file}\"\r\n\r\n    if [ ! -f \"${manifest_file}\" ]; then\r\n        log_warn \"manifest.json not found for mod download. Skipping.\"\r\n        return\r\n    fi\r\n    \r\n    local total_mods\r\n    total_mods=$(jq '[.files[]? | select(.required == true)] | length' \"${manifest_file}\")\r\n    log_info \"Found ${total_mods} required mod(s) to download from standard manifest.\"\r\n    \r\n    mkdir -p \"${SERVER_DIR}\/mods\"\r\n    \r\n    local current_mod=0\r\n    jq -c '.files[]? | select(.required == true) | {projectID, fileID}' \"${manifest_file}\" | while IFS= read -r mod_info_json; do\r\n        current_mod=$((current_mod + 1))\r\n        local mod_pid mod_fid\r\n        mod_pid=$(echo \"${mod_info_json}\" | jq -r '.projectID \/\/ empty')\r\n        mod_fid=$(echo \"${mod_info_json}\" | jq -r '.fileID \/\/ empty')\r\n        \r\n        if [ -z \"${mod_pid}\" ] || [ -z \"${mod_fid}\" ]; then\r\n            log_warn \"(${current_mod}\/${total_mods}) Skipping malformed mod entry: ${mod_info_json}\"\r\n            continue\r\n        fi\r\n\r\n        log_info \"(${current_mod}\/${total_mods}) Preparing P:${mod_pid}, F:${mod_fid}\"\r\n        local mod_dl_url\r\n        mod_dl_url=$(get_download_url \"${mod_pid}\" \"${mod_fid}\" || true)\r\n        \r\n        if [ -z \"${mod_dl_url}\" ]; then\r\n              log_warn \"(${current_mod}\/${total_mods}) SKIPPING download for P:${mod_pid} F:${mod_fid} due to API error.\"\r\n              echo \" - Project ID: ${mod_pid} | File ID: ${mod_fid} (Could not get download URL)\" >> \"${failed_log_file}\"\r\n              continue\r\n        fi\r\n\r\n        log_info \"(${current_mod}\/${total_mods}) Downloading...\"\r\n        if ! wget -nv -P \"${SERVER_DIR}\/mods\/\" \"${mod_dl_url}\"; then\r\n            log_warn \"(${current_mod}\/${total_mods}) FAILED to download P:${mod_pid}, F:${mod_fid}. wget returned an error.\"\r\n            echo \" - Project ID: ${mod_pid} | File ID: ${mod_fid} (Wget failed)\" >> \"${failed_log_file}\"\r\n        else\r\n            log_info \"(${current_mod}\/${total_mods}) Download successful.\"\r\n        fi\r\n    done\r\n    log_info \"Mod download process finished.\"\r\n}\r\n\r\ncleanup_client_mods() {\r\n    log_info \"Starting client-side mod cleanup...\"\r\n    CLIENT_MOD_PATTERNS=\"oculus iris optifine rubidium embeddium magnesium sodium phosphor lithium starlight betterf3 xaerosminimap journeymap dynamiclights lambdynamiclights bobby notenoughcrashes cosmeticarmorreworked firstpersonmod physicsmod soundphysics presencefootsteps betterthirdperson controllable defaultoptions modmenu\"\r\n    \r\n    local mods_dir=\"${SERVER_DIR}\/mods\"\r\n    if [ ! -d \"${mods_dir}\" ]; then\r\n        log_info \"Mods directory not found, skipping cleanup.\"\r\n        return\r\n    fi\r\n    \r\n    log_info \"Scanning '${mods_dir}' for potential client-side mods...\"\r\n    local files_deleted_count=0\r\n    for mod_jar in \"${mods_dir}\"\/*.jar; do\r\n        [ -f \"${mod_jar}\" ] || continue \r\n        local mod_filename_lower\r\n        mod_filename_lower=$(basename \"${mod_jar}\" | tr '[:upper:]' '[:lower:]')\r\n        for pattern in ${CLIENT_MOD_PATTERNS}; do\r\n            case \"${mod_filename_lower}\" in\r\n                *\"${pattern}\"*)\r\n                    log_info \"Removing potential client mod: $(basename \"${mod_jar}\") (matched: '${pattern}')\"\r\n                    if rm -f \"${mod_jar}\"; then\r\n                        files_deleted_count=$((files_deleted_count + 1))\r\n                    else\r\n                        log_warn \"Failed to delete ${mod_jar}\"\r\n                    fi\r\n                    break \r\n                    ;;\r\n            esac\r\n        done\r\n    done\r\n    log_info \"Deleted ${files_deleted_count} potential client-side mod(s).\"\r\n}\r\n\r\n# --- MAIN LOGIC ---\r\n\r\n# 1. DOWNLOAD ZIP\r\necho \"--- [Step 1\/7] Determining & Downloading Modpack Zip ---\"\r\nTARGET_FILE_ID=\"${MODPACK_FILE_ID}\"\r\nif [ -z \"${TARGET_FILE_ID}\" ]; then\r\n    log_info \"No File ID provided, auto-detecting server pack...\"\r\n    PROJECT_FILES_API_URL=\"${CURSEFORGE_API_URL_BASE}\/${PROJECT_ID}\/files\"\r\n    API_QUERY_PARAMS=\"?pageSize=50\"\r\n    if [ -n \"${MINECRAFT_VERSION_HINT}\" ]; then\r\n        ENCODED_MC_VERSION_HINT=$(echo \"${MINECRAFT_VERSION_HINT}\" | sed 's\/ \/%20\/g; s\/\\.\/%2E\/g')\r\n        API_QUERY_PARAMS=\"${API_QUERY_PARAMS}&gameVersion=${ENCODED_MC_VERSION_HINT}\"\r\n    fi\r\n    PROJECT_FILES_JSON=$(curl -fL -sS -H \"Accept: application\/json\" -H \"x-api-key: ${API_KEY}\" \"${PROJECT_FILES_API_URL}${API_QUERY_PARAMS}\")\r\n    if [ $? -ne 0 ]; then\r\n        log_warn \"Failed to fetch file listing.\"\r\n        PROJECT_FILES_JSON=\"\"\r\n    fi\r\n    if [ -n \"${PROJECT_FILES_JSON}\" ]; then\r\n        for rt_num in 1 2 3; do\r\n            case ${rt_num} in 1) rt=\"RELEASE\";; 2) rt=\"BETA\";; 3) rt=\"ALPHA\";; esac\r\n            log_info \"Searching for latest ${rt} server pack...\"\r\n            CANDIDATE_ID=$(echo \"${PROJECT_FILES_JSON}\" | jq -r --argjson n \"${rt_num}\" '[.data[]? | select(.isServerPack == true and .releaseType == $n)] | sort_by(.fileDate) | reverse | .[0].id \/\/ empty')\r\n            if [ -n \"${CANDIDATE_ID}\" ]; then\r\n                log_info \"Found server pack: ${CANDIDATE_ID}\"\r\n                TARGET_FILE_ID=\"${CANDIDATE_ID}\"; break\r\n            fi\r\n        done\r\n    fi\r\n    if [ -z \"${TARGET_FILE_ID}\" ]; then\r\n        log_info \"No explicit server pack found, checking main file...\"\r\n        PROJECT_INFO_JSON=$(curl -fL -sS -H \"Accept: application\/json\" -H \"x-api-key: ${API_KEY}\" \"${CURSEFORGE_API_URL_BASE}\/${PROJECT_ID}\")\r\n        if [ $? -eq 0 ]; then\r\n            MAIN_ID=$(echo \"${PROJECT_INFO_JSON}\" | jq -r '.data.mainFileId \/\/ empty')\r\n            if [ -n \"${MAIN_ID}\" ]; then\r\n                MAIN_DETAILS_JSON=$(curl -fL -sS -H \"Accept: application\/json\" -H \"x-api-key: ${API_KEY}\" \"${CURSEFORGE_API_URL_BASE}\/${PROJECT_ID}\/files\/${MAIN_ID}\")\r\n                if [ $? -eq 0 ]; then\r\n                    ASSOC_ID=$(echo \"${MAIN_DETAILS_JSON}\" | jq -r '.data.serverPackFileId \/\/ empty')\r\n                    if [ -n \"${ASSOC_ID}\" ] && [ \"${ASSOC_ID}\" != \"null\" ]; then\r\n                        log_info \"Found associated server pack: ${ASSOC_ID}\"; TARGET_FILE_ID=\"${ASSOC_ID}\"\r\n                    else\r\n                        log_info \"No associated server pack, using main file: ${MAIN_ID}\"; TARGET_FILE_ID=\"${MAIN_ID}\"\r\n                    fi\r\n                else\r\n                    log_warn \"Failed to get details for mainFileId.\"; TARGET_FILE_ID=\"${MAIN_ID}\"\r\n                fi\r\n            else log_fatal \"No mainFileId found.\"; fi\r\n        else log_fatal \"Failed to get project info.\"; fi\r\n    fi\r\nfi\r\nif [ -z \"${TARGET_FILE_ID}\" ]; then log_fatal \"Could not determine a File ID to download.\"; fi\r\nMODPACK_URL=$(get_download_url \"${PROJECT_ID}\" \"${TARGET_FILE_ID}\")\r\nif [ $? -ne 0 ] || [ -z \"${MODPACK_URL}\" ]; then log_fatal \"Failed to get download URL for File ID ${TARGET_FILE_ID}.\"; fi\r\nlog_info \"Downloading from File ID: ${TARGET_FILE_ID}\"; wget -q -O server.zip \"${MODPACK_URL}\"\r\nif [ ! -s server.zip ]; then log_fatal \"Download failed or resulted in an empty file.\"; fi\r\nlog_info \"Download complete.\"\r\n\r\n# 2. UNPACK & MOVE\r\necho \"--- [Step 2\/7] Unpacking & Moving Files ---\"\r\nTEMP_UNPACK_DIR=\"\/mnt\/server_temp_unpack\"; mkdir -p \"${TEMP_UNPACK_DIR}\"; unzip -q server.zip -d \"${TEMP_UNPACK_DIR}\"; rm server.zip\r\nif [ -z \"$(ls -A \"${TEMP_UNPACK_DIR}\")\" ]; then log_fatal \"Unpacking failed, temp dir is empty.\"; fi\r\nPACK_CONTENT_SOURCE_DIR=\"${TEMP_UNPACK_DIR}\"; num_items=$(find \"${TEMP_UNPACK_DIR}\" -mindepth 1 -maxdepth 1 -print | wc -l); if [ \"${num_items}\" -eq 1 ]; then\r\n    DETECTED_SUBFOLDER=$(find \"${TEMP_UNPACK_DIR}\" -mindepth 1 -maxdepth 1); if [ -d \"${DETECTED_SUBFOLDER}\" ]; then\r\n        log_info \"Detected single subfolder, using it as content root.\"; PACK_CONTENT_SOURCE_DIR=\"${DETECTED_SUBFOLDER}\"\r\n    fi\r\nfi\r\nlog_info \"Copying files to server root...\"; cp -r \"${PACK_CONTENT_SOURCE_DIR}\/.\" \"${SERVER_DIR}\/\"; rm -rf \"${TEMP_UNPACK_DIR}\"; cd \"${SERVER_DIR}\"\r\n\r\n# 3. SETUP LOGIC (TRUST FIRST HIERARCHY)\r\necho \"--- [Step 3\/7] Setting Up Server Environment ---\"\r\nMINECRAFT_VERSION=\"${MINECRAFT_VERSION_HINT:-unknown}\"\r\nLOADER_NAME=\"unknown\"\r\nLOADER_VERSION=\"${LOADER_VERSION_HINT:-latest}\"\r\n\r\nif [ -f \"run.sh\" ] || [ -f \"start.sh\" ]; then\r\n    log_info \"Found a custom startup script.\"\r\n    INSTALL_TYPE=\"PRE_INSTALLED_SCRIPT\"\r\n    STARTUP_SCRIPT_NAME=\"\"; if [ -f \"run.sh\" ]; then STARTUP_SCRIPT_NAME=\".\/run.sh\"; elif [ -f \"start.sh\" ]; then STARTUP_SCRIPT_NAME=\".\/start.sh\"; fi\r\n    chmod +x \"${STARTUP_SCRIPT_NAME}\"\r\n    echo \"${STARTUP_SCRIPT_NAME}\" > .ptero_startup_script\r\n    log_info \"Created .ptero_startup_script to execute '${STARTUP_SCRIPT_NAME}' automatically.\"\r\nelif [ -f \"fabric-server-launch.jar\" ]; then\r\n    log_info \"Found pre-installed Fabric server JAR.\"; INSTALL_TYPE=\"PRE_INSTALLED_FABRIC\"; LOADER_NAME=\"fabric\"\r\n    echo \"fabric-server-launch.jar\" > .serverjar; log_info \"Created .serverjar to run pre-installed Fabric.\"\r\nelif [ -f \"unix_args.txt\" ] || [ -f \".serverjar\" ]; then\r\n    log_info \"Found pre-existing startup file. Assuming pack is pre-installed.\"; INSTALL_TYPE=\"PRE_INSTALLED_FORGE\"\r\nelif [ -n \"$(ls neoforge-*-installer.jar 2>\/dev\/null || ls forge-*-installer.jar 2>\/dev\/null)\" ]; then\r\n    log_info \"Found embedded Forge\/NeoForge installer.\"; INSTALL_TYPE=\"EMBEDDED_INSTALLER\"\r\n    EMBEDDED_INSTALLER_JAR=\"\"; if [ -n \"$(ls neoforge-*-installer.jar 2>\/dev\/null)\" ]; then EMBEDDED_INSTALLER_JAR=$(ls neoforge-*-installer.jar | head -n 1); LOADER_NAME=\"neoforge\"; else EMBEDDED_INSTALLER_JAR=$(ls forge-*-installer.jar | head -n 1); LOADER_NAME=\"forge\"; fi\r\n    log_info \"Running embedded installer: ${EMBEDDED_INSTALLER_JAR}\"; java -jar \"${EMBEDDED_INSTALLER_JAR}\" --installServer; log_info \"Installer finished.\"\r\n    MC_V_P=\"\"; L_V_P=\"\"; TEMP_MC_V=$(echo \"${EMBEDDED_INSTALLER_JAR}\"|sed -n \"s\/^${LOADER_NAME}-\\\\([0-9.]\\\\+\\\\)-\\\\([0-9.]\\\\+\\\\)-installer\\\\.jar$\/\\\\1\/p\"); TEMP_LOADER_V=$(echo \"${EMBEDDED_INSTALLER_JAR}\"|sed -n \"s\/^${LOADER_NAME}-\\\\([0-9.]\\\\+\\\\)-\\\\([0-9.]\\\\+\\\\)-installer\\\\.jar$\/\\\\2\/p\"); if [ -n \"${TEMP_MC_V}\" ]; then MC_V_P=\"${TEMP_MC_V}\"; L_V_P=\"${TEMP_LOADER_V}\"; else TEMP_LOADER_V=$(echo \"${EMBEDDED_INSTALLER_JAR}\"|sed -n \"s\/^${LOADER_NAME}-\\\\([0-9.]\\\\+\\\\)-installer\\\\.jar$\/\\\\1\/p\"); if [ -n \"${TEMP_LOADER_V}\" ]; then L_V_P=\"${TEMP_LOADER_V}\"; fi; fi; if [ -n \"${MC_V_P}\" ]; then MINECRAFT_VERSION=\"${MC_V_P}\"; fi; if [ -n \"${L_V_P}\" ]; then LOADER_VERSION=\"${L_V_P}\"; fi; log_info \"Effective Info -> MC: ${MINECRAFT_VERSION}, Loader: ${LOADER_NAME} ${LOADER_VERSION}\"\r\n    UNIX_ARGS_FILE_PATH_PRIMARY=\"\"; if [ \"${LOADER_NAME}\" = \"neoforge\" ]; then NEO_ARTIFACT=\"neoforge\"; if [ \"${MINECRAFT_VERSION}\" = \"1.20.1\" ]; then NEO_ARTIFACT=\"forge\"; fi; if [ \"${NEO_ARTIFACT}\" = \"forge\" ]; then UNIX_ARGS_FILE_PATH_PRIMARY=\"libraries\/net\/neoforged\/forge\/${MINECRAFT_VERSION}-${LOADER_VERSION}\/unix_args.txt\"; else UNIX_ARGS_FILE_PATH_PRIMARY=\"libraries\/net\/neoforged\/neoforge\/${LOADER_VERSION}\/unix_args.txt\"; fi; elif [ \"${LOADER_NAME}\" = \"forge\" ]; then UNIX_ARGS_FILE_PATH_PRIMARY=\"libraries\/net\/minecraftforge\/forge\/${MINECRAFT_VERSION}-${LOADER_VERSION}\/unix_args.txt\"; fi\r\n    if [ -f \"${UNIX_ARGS_FILE_PATH_PRIMARY}\" ]; then ln -sf \"${UNIX_ARGS_FILE_PATH_PRIMARY}\" unix_args.txt; log_info \"Symlinked unix_args.txt from primary path.\"; else log_warn \"Primary unix_args.txt path failed. Searching broadly...\"; FOUND_UNIX_ARGS=$(find .\/libraries -path \"*\/unix_args.txt\" -print -quit); if [ -n \"${FOUND_UNIX_ARGS}\" ]; then ln -sf \"${FOUND_UNIX_ARGS}\" unix_args.txt; log_info \"Symlinked unix_args.txt by broader search.\"; else log_warn \"Broader search failed. Checking fallback JARs.\"; if [ -f \"${LOADER_NAME}-${MINECRAFT_VERSION}-${LOADER_VERSION}-universal.jar\" ]; then echo \"${LOADER_NAME}-${MINECRAFT_VERSION}-${LOADER_VERSION}-universal.jar\" > .serverjar; log_info \"Created .serverjar fallback.\"; else log_fatal \"Could not establish startup method after installer.\"; fi; fi; fi\r\n    rm -f \"${EMBEDDED_INSTALLER_JAR}\"\r\nelif ls mods\/fabric-api-*.jar 1>\/dev\/null 2>&1; then\r\n    log_info \"No pre-installed setup or installer found, but Fabric API is present. Installing Fabric loader as a fallback.\"\r\n    INSTALL_TYPE=\"FABRIC_PACK_FALLBACK\"\r\n    LOADER_NAME=\"fabric\"\r\n    log_info \"Installing Fabric: MC ${MINECRAFT_VERSION}, Loader ${LOADER_VERSION}\"\r\n    FAB_INSTALLER_URL=$(curl -fL -sS \"https:\/\/meta.fabricmc.net\/v2\/versions\/installer\" | jq -r '.[0].url')\r\n    wget -nv -O fabric-installer.jar \"${FAB_INSTALLER_URL}\"\r\n    java -jar fabric-installer.jar server -mcversion \"${MINECRAFT_VERSION}\" -loader \"${LOADER_VERSION}\" -downloadMinecraft\r\n    echo \"fabric-server-launch.jar\" > .serverjar\r\n    rm -f fabric-installer.jar\r\nelif [ -f \"manifest.json\" ]; then\r\n    log_info \"No other setup method found. Falling back to manifest.json.\"\r\n    STANDARD_LOADER_ID_FULL=$(jq -r '.minecraft.modLoaders[]?|select(.primary==true)|.id\/\/empty' manifest.json)\r\n    if [ -n \"${STANDARD_LOADER_ID_FULL}\" ]; then\r\n        INSTALL_TYPE=\"STANDARD_MANIFEST\"; log_info \"Standard manifest detected.\"\r\n        MINECRAFT_VERSION=$(jq -r '.minecraft.version\/\/empty' manifest.json); case \"${STANDARD_LOADER_ID_FULL}\" in *neoforge*)LOADER_NAME=\"neoforge\";;*forge*)LOADER_NAME=\"forge\";;*fabric*)LOADER_NAME=\"fabric\";;*quilt*)LOADER_NAME=\"quilt\";;esac; LOADER_VERSION=$(echo \"${STANDARD_LOADER_ID_FULL}\"|sed -E \"s\/^${LOADER_NAME}-?\/\/I\")\r\n    else\r\n        ALT_MC_V=$(jq -r '.minecraftVersion\/\/empty' manifest.json); ALT_L_N=$(jq -r '.modloader\/\/empty' manifest.json); ALT_L_V=$(jq -r '.modloaderVersion\/\/empty' manifest.json)\r\n        if [ -n \"${ALT_MC_V}\" ]; then INSTALL_TYPE=\"ALTERNATIVE_MANIFEST\"; log_info \"Alternative manifest detected.\"; MINECRAFT_VERSION=\"${ALT_MC_V}\"; case \"${ALT_L_N}\" in Forge|forge)LOADER_NAME=\"forge\";;NeoForge|neoforge)LOADER_NAME=\"neoforge\";;Fabric|fabric)LOADER_NAME=\"fabric\";;Quilt|quilt)LOADER_NAME=\"quilt\";;esac; LOADER_VERSION=\"${ALT_L_V}\"; else log_fatal \"Manifest found, but it is unparsable.\"; fi\r\n    fi\r\n    log_info \"Installing from manifest: MC ${MINECRAFT_VERSION}, Loader ${LOADER_NAME} ${LOADER_VERSION}\"\r\n    case \"${LOADER_NAME}\" in \"forge\") FORGE_V_FULL=\"${MINECRAFT_VERSION}-${LOADER_VERSION}\"; wget -nv -O i.jar \"https:\/\/maven.minecraftforge.net\/net\/minecraftforge\/forge\/${FORGE_V_FULL}\/forge-${FORGE_V_FULL}-installer.jar\"||wget -nv -O i.jar \"https:\/\/maven.minecraftforge.net\/net\/minecraftforge\/forge\/${FORGE_V_FULL}\/forge-${FORGE_V_FULL}-universal.jar\"; java -jar i.jar --installServer; UNIX_ARGS=\"libraries\/net\/minecraftforge\/forge\/${FORGE_V_FULL}\/unix_args.txt\"; if [ -f \"${UNIX_ARGS}\" ]; then ln -sf \"${UNIX_ARGS}\" unix_args.txt; else echo \"forge-${FORGE_V_FULL}-universal.jar\" > .serverjar; fi ;; \"neoforge\") NEO_ART=\"neoforge\"; if [ \"${MINECRAFT_VERSION}\" = \"1.20.1\" ]; then NEO_ART=\"forge\"; fi; wget -nv -O i.jar \"https:\/\/maven.neoforged.net\/releases\/net\/neoforged\/${NEO_ART}\/${LOADER_VERSION}\/${NEO_ART}-${LOADER_VERSION}-installer.jar\"; java -jar i.jar --installServer; UNIX_ARGS=\"libraries\/net\/neoforged\/${NEO_ART}\/${LOADER_VERSION}\/unix_args.txt\"; if [ -f \"${UNIX_ARGS}\" ]; then ln -sf \"${UNIX_ARGS}\" unix_args.txt; fi ;; \"fabric\") FAB_URL=$(curl -fL -sS \"https:\/\/meta.fabricmc.net\/v2\/versions\/installer\"|jq -r '..url'); wget -nv -O i.jar \"${FAB_URL}\"; java -jar i.jar server -mcversion \"${MINECRAFT_VERSION}\" -loader \"${LOADER_VERSION}\" -downloadMinecraft; echo \"fabric-server-launch.jar\" > .serverjar ;; \"quilt\") QLT_URL=$(curl -fL -sS \"https:\/\/meta.quiltmc.org\/v3\/versions\/installer\"|jq -r '..url'); wget -nv -O i.jar \"${QLT_URL}\"; java -jar i.jar install server \"${MINECRAFT_VERSION}\" \"${LOADER_VERSION}\" --download-server --install-dir=.\/; echo \"quilt-server-launch.jar\" > .serverjar ;; esac; rm -f i.jar\r\nelse\r\n    log_fatal \"Could not determine any installation method. No startup files, installers, or manifest found.\"\r\nfi\r\n\r\n# 4. MODS & CLEANUP\r\necho \"--- [Step 4\/7] Handling Mods & Cleanup ---\"\r\nif [ \"${INSTALL_TYPE}\" = \"STANDARD_MANIFEST\" ]; then\r\n    json_download_mods\r\n    cleanup_client_mods\r\nelif [ \"${INSTALL_TYPE}\" = \"ALTERNATIVE_MANIFEST\" ]; then\r\n    log_info \"Skipping mod downloads (alternative manifest).\"\r\n    cleanup_client_mods\r\nelse\r\n    log_info \"Skipping mod downloads and cleanup for pre-configured server pack.\"\r\nfi\r\n\r\n# 7. FINALIZING\r\necho \"--- [Step 7\/7] Finalizing Setup ---\"\r\nlog_info \"Creating universal startup script (start-server.sh)...\"\r\ncat <<EOF > start-server.sh\r\n#!\/bin\/sh\r\n# This script is auto-generated by the Universal Installer.\r\n\r\n# Check for a custom startup script first, provided by some server packs\r\nif [ -f .ptero_startup_script ]; then\r\n    START_CMD=\\$(cat .ptero_startup_script)\r\n    echo \"Starting server using custom script: \\$START_CMD\"\r\n    exec \\$START_CMD\r\n# Check for modern Forge\/NeoForge startup method\r\nelif [ -f unix_args.txt ]; then\r\n    echo \"Starting server using unix_args.txt...\"\r\n    exec java \\$( [[ -f user_jvm_args.txt ]] && printf '%s' \"@user_jvm_args.txt\" ) -Xms128M -Xmx\\${SERVER_MEMORY}M -Dterminal.jline=false -Dterminal.ansi=true @unix_args.txt\r\n# Check for Fabric or older Forge\/NeoForge startup method\r\nelif [ -f .serverjar ]; then\r\n    echo \"Starting server using .serverjar...\"\r\n    exec java \\$( [[ -f user_jvm_args.txt ]] && printf '%s' \"@user_jvm_args.txt\" ) -Xms128M -Xmx\\${SERVER_MEMORY}M -Dterminal.jline=false -Dterminal.ansi=true -jar \\$(cat .serverjar)\r\nelse\r\n    echo \"FATAL: Could not find a valid startup method (.ptero_startup_script, unix_args.txt, or .serverjar).\"\r\n    exit 1\r\nfi\r\nEOF\r\nchmod +x start-server.sh\r\nlog_info \"Startup script created successfully.\"\r\n\r\nif [ -f eula.txt ]; then sed -i 's\/eula=false\/eula=true\/g' eula.txt; log_info \"EULA updated.\"; else echo \"eula=true\" > eula.txt; log_info \"EULA created.\"; fi\r\nif [ \"${INSTALL_TYPE}\" = \"STANDARD_MANIFEST\" ] || [ \"${INSTALL_TYPE}\" = \"ALTERNATIVE_MANIFEST\" ]; then if [ -f \"manifest.json\" ]; then rm -f \"manifest.json\"; fi; fi\r\n\r\necho\r\necho \"--- INSTALLATION COMPLETE ---\"\r\necho \"Minecraft Version: ${MINECRAFT_VERSION}\" \r\necho \"Mod Loader: ${LOADER_NAME} ${LOADER_VERSION}\" \r\nif [ ! -f \"start-server.sh\" ]; then log_warn \"CRITICAL: start-server.sh was not created. Pterodactyl startup will fail.\"; fi\r\necho \"-----------------------------\"\r\n\r\nFAILED_LOG_FILE=\"${SERVER_DIR}\/failed_downloads.log\"; if [ -f \"${FAILED_LOG_FILE}\" ]; then echo; echo \"--- !!! MANUAL ACTION REQUIRED !!! ---\"; cat \"${FAILED_LOG_FILE}\"; echo \"----------------------------------------\"; rm -f \"${FAILED_LOG_FILE}\"; fi",
            "container": "alpine:latest",
            "entrypoint": "ash"
        }
    },
    "variables": [
        {
            "name": "Modpack Project ID (CurseForge)",
            "description": "The CurseForge Project ID for the modpack (e.g., from the modpack's URL).",
            "env_variable": "MODPACK_PROJECT_ID",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:20",
            "field_type": "text"
        },
        {
            "name": "CurseForge API Key",
            "description": "Your CurseForge API Key for downloading files.",
            "env_variable": "CURSEFORGE_API_KEY",
            "default_value": "",
            "user_viewable": true,
            "user_editable": false,
            "rules": "required|string|max:100",
            "field_type": "text"
        },
        {
            "name": "Server JAR File (Usually Auto-Set)",
            "description": "Name of the JAR file to run. This script typically creates .serverjar or relies on unix_args.txt.",
            "env_variable": "SERVER_JARFILE",
            "default_value": "PLEASE_SET_VIA_SCRIPT.jar",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string",
            "field_type": "text"
        },
        {
            "name": "Minecraft Version (Info\/Hint)",
            "description": "Optional: Minecraft version hint for the script, primarily for display or very specific cases. Script usually gets this from manifest.",
            "env_variable": "MINECRAFT_VERSION_HINT",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Loader Version (Info\/Hint)",
            "description": "Optional: Mod loader version hint. Script usually gets this from manifest.",
            "env_variable": "LOADER_VERSION_HINT",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Modpack File ID",
            "description": "Pulls down specific file IDs from curseforge website",
            "env_variable": "MODPACK_FILE_ID",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable",
            "field_type": "text"
        }
    ]
}